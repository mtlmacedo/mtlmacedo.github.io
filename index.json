[{"categories":["Go","Go Programming 101:"],"content":"GoLang Basics","date":"2023-06-13","objectID":"/posts/lists/","tags":["go","golang","tutorial","lists","list","array","maps","tutorial","slices","slice"],"title":"Go Programming 101: Arrays, Slices and Maps","uri":"/posts/lists/"},{"categories":["Go","Go Programming 101:"],"content":"Go lang: Arrays, Slices, and Maps Explained Welcome to another exciting installment of our GO 101 series! Today we’ll delve into arrays, slices, and maps. These data structures are fundamental in Go and mastering them will greatly enhance your development skills. So let’s dive right in! ","date":"2023-06-13","objectID":"/posts/lists/:1:0","tags":["go","golang","tutorial","lists","list","array","maps","tutorial","slices","slice"],"title":"Go Programming 101: Arrays, Slices and Maps","uri":"/posts/lists/"},{"categories":["Go","Go Programming 101:"],"content":"Arrays In Go, an array is a fixed-size sequence of elements of the same type. They provide a way to store and access multiple values under a single name. Here’s an example of how to declare and initialize an array: var numbers [5]int // Declaring an array of 5 integers numbers[0] = 10 // Assigning a value to the first element numbers[1] = 20 // Assigning a value to the second element numbers[2] = 30 // Assigning a value to the third element numbers[3] = 40 // Assigning a value to the fourth element numbers[4] = 50 // Assigning a value to the fifth element Arrays in Go have a fixed length, which means you cannot change their size once they are defined. Accessing elements is done using zero-based indexing, where the first element is at index 0. Keep in mind that arrays in Go are value types, which means they are copied when assigned to a new variable or passed as function arguments. ","date":"2023-06-13","objectID":"/posts/lists/:2:0","tags":["go","golang","tutorial","lists","list","array","maps","tutorial","slices","slice"],"title":"Go Programming 101: Arrays, Slices and Maps","uri":"/posts/lists/"},{"categories":["Go","Go Programming 101:"],"content":"Slices Slices in Go are more versatile than arrays. They are built on top of arrays and provide a dynamic, resizable view into the underlying array. Slices are created using a literal syntax or by slicing an existing array or another slice. Let’s see some examples: // Using literal syntax to create a slice fruits := []string{\"apple\", \"banana\", \"orange\", \"kiwi\"} // Slicing an existing array to create a slice numbers := [5]int{10, 20, 30, 40, 50} numSlice := numbers[1:4] // Creates a slice from index 1 to 3 (excluding 4) // Creating an empty slice with a predefined capacity emptySlice := make([]int, 0, 10) // Appending new elements to the slice numSlice = append(numSlice, 60, 70, 80) // Printing the slice fmt.Println(numSlice) // Output: [20 30 40 60 70 80] Slices are incredibly powerful because they can grow or shrink dynamically. They maintain a reference to the underlying array, and if the slice capacity is exceeded, a new larger array is allocated and the elements are copied over. This behavior allows for efficient memory utilization. ","date":"2023-06-13","objectID":"/posts/lists/:3:0","tags":["go","golang","tutorial","lists","list","array","maps","tutorial","slices","slice"],"title":"Go Programming 101: Arrays, Slices and Maps","uri":"/posts/lists/"},{"categories":["Go","Go Programming 101:"],"content":"Maps Maps, also known as associative arrays or dictionaries, are unordered collections of key-value pairs. They provide an efficient way to retrieve and update values based on a unique key. In Go, maps are declared using the map keyword, and here’s an example: ages := map[string]int{ \"John\": 30, \"Alice\": 25, \"Bob\": 35, } In the above example, we have a map where the keys are of type string and the values are of type int. Maps are accessed using the square bracket notation, similar to arrays and slices, but instead of an index, we provide the key. If the key is not present, the map returns the zero value of the value type. Maps in Go are references to hash tables, making them efficient for lookups and updates. They can also dynamically grow to accommodate more key-value pairs. However, it’s important to note that maps are not safe for concurrent access by default. Proper synchronization is required when using maps concurrently. ","date":"2023-06-13","objectID":"/posts/lists/:4:0","tags":["go","golang","tutorial","lists","list","array","maps","tutorial","slices","slice"],"title":"Go Programming 101: Arrays, Slices and Maps","uri":"/posts/lists/"},{"categories":["Go","Go Programming 101:"],"content":"Conclusion Congratulations on making it through this in-depth exploration of arrays, slices, and maps in Go! We’ve covered the basics of each data structure and highlighted their unique features and use cases. Arrays provide fixed-size collections, slices offer dynamic views into arrays, and maps excel at key-value lookups. Understanding these fundamental concepts will undoubtedly boost your Go programming skills. ","date":"2023-06-13","objectID":"/posts/lists/:5:0","tags":["go","golang","tutorial","lists","list","array","maps","tutorial","slices","slice"],"title":"Go Programming 101: Arrays, Slices and Maps","uri":"/posts/lists/"},{"categories":null,"content":"Software engineer with 5+ years of .NET \n Making my way into GO","date":"2023-06-13","objectID":"/page/about/","tags":["me","about","author"],"title":"About","uri":"/page/about/"},{"categories":null,"content":"Hey there ! I’m a Software engineer with over 5 years of experience specializing in .NET development. Proficient in technologies such as C/C++, .NET, Python, java, SQL, Angular, Azure, REST API, and Typescript. I have a strong foundation in building complex software systems. I am currently seeking to transition to Go(lang) development. My Resume ","date":"2023-06-13","objectID":"/page/about/:0:0","tags":["me","about","author"],"title":"About","uri":"/page/about/"},{"categories":["Go","Go Programming 101:"],"content":"GoLang Basics","date":"2023-06-11","objectID":"/posts/gobasics/","tags":["go","golang","tutorial","installation","setup","varaibles","concurrency","basics"],"title":"Go Programming 101: A Beginner's Guide","uri":"/posts/gobasics/"},{"categories":["Go","Go Programming 101:"],"content":"Introduction Welcome to the exciting world of Go programming! In this blog post, we will explore why Go has become increasingly popular and discuss its unique features and benefits. Whether you’re a beginner looking to dive into programming or an experienced developer curious about Go, this guide will provide you with a solid foundation to start your Go journey. ","date":"2023-06-11","objectID":"/posts/gobasics/:1:0","tags":["go","golang","tutorial","installation","setup","varaibles","concurrency","basics"],"title":"Go Programming 101: A Beginner's Guide","uri":"/posts/gobasics/"},{"categories":["Go","Go Programming 101:"],"content":"Why Go is gaining popularity Go has been making waves in the programming community due to its remarkable features and advantages. Its simplicity is a breath of fresh air in the often complex world of programming languages. Go’s straightforward syntax and minimalistic design make it easier to learn and write code, helping developers build efficient and readable programs. ","date":"2023-06-11","objectID":"/posts/gobasics/:2:0","tags":["go","golang","tutorial","installation","setup","varaibles","concurrency","basics"],"title":"Go Programming 101: A Beginner's Guide","uri":"/posts/gobasics/"},{"categories":["Go","Go Programming 101:"],"content":"Concurrency made easy Go shines when it comes to concurrent programming. With goroutines and channels, Go offers an intuitive and powerful approach to handle concurrent tasks. This built-in support for concurrency allows developers to write highly performant and scalable applications that can effectively leverage the power of modern hardware. ","date":"2023-06-11","objectID":"/posts/gobasics/:2:1","tags":["go","golang","tutorial","installation","setup","varaibles","concurrency","basics"],"title":"Go Programming 101: A Beginner's Guide","uri":"/posts/gobasics/"},{"categories":["Go","Go Programming 101:"],"content":"Efficiency at its core In the realm of programming languages, efficiency is paramount. Go was built with a focus on delivering fast execution times and efficient memory usage. Its compiler and runtime are optimized to generate highly optimized binaries, resulting in lightning-fast programs. Additionally, Go’s garbage collector takes care of memory management, reducing the burden on developers. ","date":"2023-06-11","objectID":"/posts/gobasics/:2:2","tags":["go","golang","tutorial","installation","setup","varaibles","concurrency","basics"],"title":"Go Programming 101: A Beginner's Guide","uri":"/posts/gobasics/"},{"categories":["Go","Go Programming 101:"],"content":"Goals of this blog post Our main objective is to equip beginners with the necessary knowledge to get started with Go programming. By the end of this guide, you will have a solid understanding of how to set up Go on your operating system, configure the environment variables, and ensure that your Go installation is functioning correctly. So, let’s jump right into it! ","date":"2023-06-11","objectID":"/posts/gobasics/:3:0","tags":["go","golang","tutorial","installation","setup","varaibles","concurrency","basics"],"title":"Go Programming 101: A Beginner's Guide","uri":"/posts/gobasics/"},{"categories":["Go","Go Programming 101:"],"content":"Installing and Setting Up Go Before diving into Go programming, you need to have Go installed on your machine. Here’s a step-by-step guide to help you get started: Download Go: Visit the official Go website here and download the appropriate installer for your operating system. Install Go: Run the installer and follow the instructions provided to install Go on your machine. Set Up the Go Environment: Configure the Go environment variables such as GOROOT, GOPATH, and GOBIN to ensure proper functioning of Go. GOROOT: GOROOT is the location where Go is installed on your machine. After installing Go, set the GOROOT environment variable to the path where Go is installed. For example, if Go is installed in the /usr/local/go directory on Linux or macOS, you can set GOROOT by adding the following line to your shell profile file (e.g., .bashrc, .bash_profile, `.zshrc): export GOROOT=/usr/local/go GOPATH: GOPATH is the location where your Go projects and dependencies will reside. It is recommended to create a dedicated directory for your GOPATH. Set the GOPATH environment variable to this directory path. For example, you can set GOPATH by adding the following line to your shell profile file: Copy code export GOPATH=$HOME/go GOBIN: GOBIN is an optional environment variable that specifies the directory where compiled Go binaries will be placed. If you want to install executables generated by go install to a specific location, set the GOBIN environment variable accordingly. For example: export GOBIN=$GOPATH/bin Path: Add the Go binary directory to your system’s PATH variable. This ensures that you can run Go commands and executables from any location in the terminal. Append the following line to your shell profile file: export PATH=$PATH:$GOROOT/bin:$GOPATH/bin After making these changes, save the shell profile file, and restart your terminal or run the source command to apply the changes. By setting up the Go environment variables as described above, you ensure that Go commands, project dependencies, and executables are properly located and accessible, allowing you to work with Go seamlessly. Verify Installation: Verify that Go is installed correctly by opening a terminal or command prompt and running the go version command. It should display the installed Go version. ","date":"2023-06-11","objectID":"/posts/gobasics/:4:0","tags":["go","golang","tutorial","installation","setup","varaibles","concurrency","basics"],"title":"Go Programming 101: A Beginner's Guide","uri":"/posts/gobasics/"},{"categories":["Go","Go Programming 101:"],"content":"Your First Go Program Now that Go is installed, let’s dive into writing your first Go program, the classic “Hello, World!” program: package main import \"fmt\" func main() { fmt.Println(\"Hello, World!\") } ","date":"2023-06-11","objectID":"/posts/gobasics/:5:0","tags":["go","golang","tutorial","installation","setup","varaibles","concurrency","basics"],"title":"Go Programming 101: A Beginner's Guide","uri":"/posts/gobasics/"},{"categories":["Go","Go Programming 101:"],"content":"Here’s what’s happening in the code The package main line declares that this file is part of the main package, which is the entry point for executing the program. The import “fmt” statement imports the fmt package, which provides functions for formatted I/O, including printing to the console. The func main() is the main function that serves as the entry point for the program’s execution. It is automatically called when the program starts. Inside the main function, we use fmt.Println() to print the “Hello, World!” message to the console. To run this program, open a terminal or command prompt, navigate to the directory where you saved the Go file, and execute the following command go run filename.go You should see the output “Hello, World!” printed to the console. ","date":"2023-06-11","objectID":"/posts/gobasics/:5:1","tags":["go","golang","tutorial","installation","setup","varaibles","concurrency","basics"],"title":"Go Programming 101: A Beginner's Guide","uri":"/posts/gobasics/"},{"categories":["Go","Go Programming 101:"],"content":"Creating a Module go mod init github.com/myuser/myproject Once you run the go mod init command, it performs the following actions: Creates a go.mod file in the root directory of your project if one doesn’t already exist. Sets the module’s import path to the provided argument in the go.mod file. The go.mod file is crucial for Go modules. It specifies the module’s dependencies, including their version requirements and other metadata. It allows you to manage and control the dependencies of your project easily. Additionally, the go mod init command ensures that your project adheres to Go’s module system, enabling you to leverage features such as versioning, dependency resolution, and reproducible builds. Note that the go mod init command should be run at the root directory of your project, where your main Go files or packages are located. ","date":"2023-06-11","objectID":"/posts/gobasics/:6:0","tags":["go","golang","tutorial","installation","setup","varaibles","concurrency","basics"],"title":"Go Programming 101: A Beginner's Guide","uri":"/posts/gobasics/"},{"categories":["Go","Go Programming 101:"],"content":"Variables and Data Types In Go, variables are used to store values of different types. Let’s explore some common data types in Go: Integers: Used to represent whole numbers, such as int and int64. Floating-Point Numbers: Used to represent decimal numbers, such as float32 and float64. Strings: Used to represent text, enclosed in double quotes, e.g., “Hello, Go!”. Booleans: Used to represent true or false values, e.g., true or false. And more: Go provides additional data types like arrays, slices, maps, structs, and pointers. You can declare and initialize variables in Go using the following syntax: var variableName dataType = value or use type inference for shorter variable declaration: variableName := value ","date":"2023-06-11","objectID":"/posts/gobasics/:7:0","tags":["go","golang","tutorial","installation","setup","varaibles","concurrency","basics"],"title":"Go Programming 101: A Beginner's Guide","uri":"/posts/gobasics/"},{"categories":["Go","Go Programming 101:"],"content":"Control Flow and Loops Go provides various control flow statements and loop constructs to control the program’s flow: Conditional Statements: The if statement is used to execute a block of code based on a condition. Go also supports the else and else if clauses for multiple conditions. package main import \"fmt\" func main() { age := 20 if age \u003e= 18 { fmt.Println(\"You are an adult.\") } else { fmt.Println(\"You are a minor.\") } } When you run this program, it will output: You are an adult. Loops: Go provides a versatile for loop that can be used for iterating over collections, executing a block of code repeatedly, or creating infinite loops. package main import \"fmt\" func main() { age := 20 for age \u003e= 18 { fmt.Println(\"You are an adult. Age:\", age) age-- } fmt.Println(\"You are a minor. Age:\", age) } You are an adult. Age: 20 You are an adult. Age: 19 You are an adult. Age: 18 You are a minor. Age: 17 ","date":"2023-06-11","objectID":"/posts/gobasics/:8:0","tags":["go","golang","tutorial","installation","setup","varaibles","concurrency","basics"],"title":"Go Programming 101: A Beginner's Guide","uri":"/posts/gobasics/"},{"categories":["Go","Go Programming 101:"],"content":"Functions and Packages Functions are an essential building block in Go. They allow you to encapsulate reusable pieces of code. Go follows a simple syntax for defining and calling functions: func functionName(parameters) returnType { // function body return value } Go encourages modular code organization through packages. You can create your own custom packages or import existing packages to leverage their functionality. Packages in Go are used to organize and group related code together. They provide a way to modularize your codebase, making it easier to manage, reuse, and collaborate with others. A package can contain functions, types, variables, and other Go source code files. Key points to know about packages in Go: Package Declaration: Each Go source file begins with a package declaration. The package name is specified at the top of the file, such as package main or package utils. The package name is used to uniquely identify and import the package in other Go files. Importing Packages: To use functionality from other packages, you need to import them in your Go file. The import keyword is used to import packages. For example, import “fmt” imports the fmt package, which provides functions for formatted I/O. Visibility: Go provides two levels of visibility for identifiers within a package: exported and unexported. Exported identifiers are capitalized, allowing them to be accessed from other packages. Unexported identifiers are lowercase and can only be accessed within the same package. package utils import \"fmt\" func printMessage() { fmt.Println(\"This is an unexported message.\") } // PrintGreetings is an exported function func PrintGreetings() { fmt.Println(\"Hello, Gopher!\") } Standard Library and Third-Party Packages: Go comes with a rich standard library that provides a wide range of packages for common tasks. These packages are readily available for use without any additional installation. Additionally, you can also use third-party packages by importing them into your Go projects. Third-party packages are typically fetched and managed using Go package managers like Go Modules. you can find the go package manager here Package Naming Convention: It is recommended to choose meaningful and descriptive names for your packages. Package names should be concise, lowercase, and avoid unnecessary abbreviations or underscores. Using package names that are related to the functionality they provide can make your code more understandable and maintainable. Creating and Using Custom Packages utils.go package utils import \"fmt\" // Add is a function that returns the sum of two numbers func Add(a, b int) int { return a + b } // Greeting is a variable holding a greeting message var Greeting = \"Welcome!\" main.go Copy code package main import ( \"fmt\" \"github.com/your-username/your-package/utils\" ) func main() { sum := utils.Add(3, 5) fmt.Println(\"Sum:\", sum) fmt.Println(utils.Greeting) } ","date":"2023-06-11","objectID":"/posts/gobasics/:9:0","tags":["go","golang","tutorial","installation","setup","varaibles","concurrency","basics"],"title":"Go Programming 101: A Beginner's Guide","uri":"/posts/gobasics/"},{"categories":["Go","Go Programming 101:"],"content":"Error Handling Proper error handling is crucial for building robust and reliable Go programs. Go provides a dedicated error type and idiomatic error handling techniques to handle errors effectively. Error checking, error wrapping, and the use of the “errors” package are some of the essential practices to ensure proper error handling in Go. package main import ( \"errors\" \"fmt\" ) func divide(a, b float64) (float64, error) { if b == 0 { return 0, errors.New(\"division by zero is not allowed\") } return a / b, nil } func main() { numerator := 10.0 denominator := 0.0 result, err := divide(numerator, denominator) if err != nil { fmt.Println(\"Error:\", err) return } fmt.Printf(\"%.2f / %.2f = %.2f\\n\", numerator, denominator, result) } In this example, we have a divide function that takes two floating-point numbers as input and returns the result of the division operation. If the denominator is zero, the function returns an error using the errors.New function. In the main function, we call the divide function with a numerator and denominator. If an error occurs during the division, we handle it by checking if err is not nil. We print the error message and exit the program. Otherwise, we print the result of the division. ","date":"2023-06-11","objectID":"/posts/gobasics/:10:0","tags":["go","golang","tutorial","installation","setup","varaibles","concurrency","basics"],"title":"Go Programming 101: A Beginner's Guide","uri":"/posts/gobasics/"},{"categories":["Go","Go Programming 101:"],"content":"Conclusion Congratulations! You’ve taken your first steps into the world of Go programming. In this article, we covered the installation process, wrote a “Hello, World!” program, explored variables and data types, discussed control flow and loops, and introduced functions and packages. Understanding these fundamental concepts will serve as a solid foundation for your future adventures in Go programming. To further expand your knowledge and skills, I encourage you to explore Go’s extensive standard library, advanced topics like concurrency, and real-world applications of Go in web development, systems programming, and more. There are plenty of resources available, including online tutorials, books, and the official Go documentation. Now it’s time to unleash your creativity and start building amazing applications with Go. Happy coding! ","date":"2023-06-11","objectID":"/posts/gobasics/:11:0","tags":["go","golang","tutorial","installation","setup","varaibles","concurrency","basics"],"title":"Go Programming 101: A Beginner's Guide","uri":"/posts/gobasics/"}]